// Copyright 2015 Gushcha Anton
/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
// Written in D programing language
/**
*    Describes AST for JASS language.
*/
module djass.parser.tree;

import std.range;

interface ISyntaxTree 
{
    
}

class JassModule : ISyntaxTree
{
    this(InputRange!TypeDef typeDefs, InputRange!GlobalVar globalVars,
        InputRange!Native natives, InputRange!Function functions)
    {
        this.typeDefs = typeDefs;
        this.globalVars = globalVars;
        this.natives = natives;
        this.functions = functions;
    }
    
    private
    {
        InputRange!TypeDef typeDefs;
        InputRange!GlobalVar globalVars;
        InputRange!Native natives;
        InputRange!Function functions;
    }
}

class TypeDef : ISyntaxTree
{
    this(string name, string extends)
    {
        this.name = name;
        this.extends = extends;
    }
    
    private
    {
        string name, extends;
    }
}

class GlobalVar : ISyntaxTree
{
    this(bool isConstant, bool isArray, string type, string name,
        Expression initializer = null)
    {
        this.isConstant = isConstant;
        this.isArray = isArray;
        this.type = type;
        this.name = name;
        this.initializer = initializer;
    }
    
    private
    {
        bool isConstant;
        bool isArray;
        string type;
        string name;
        Expression initializer;
    }
}

class Native : ISyntaxTree
{
    this(bool isConstant, FunctionDecl funcDecl)
    {
        this.isConstant = isConstant;
        this.funcDecl = funcDecl;
    }
    
    private
    {
        bool isConstant;
        FunctionDecl funcDecl;
    }
}

class FunctionDecl : ISyntaxTree
{
    this(string name, Param[] params, string returnType)
    {
        this.name = name;
        this.params = params;
        this.returnType = returnType;
    }
    
    static struct Param
    {
        string type;
        string name;
    }
    
    private
    {
        string name;
        Param[] params;
        string returnType;
    }
}

class Expression : ISyntaxTree
{
    
}

class BinaryExpression : Expression
{
    this(Type type, Expression left, Expression right)
    {
        this.type = type;
        this.left = left;
        this.right = right;
    }
    
    enum Type
    {
        And, Or, Equal, NotEqual, GreaterEqual, LessEqual, Greater, Less,
        Summ, Substract, Multiply, Division, Reminder 
    }
    
    private 
    {
        Type type;
        Expression left;
        Expression right;
    }
}

class UnaryExpression : Expression
{
    this(Type type, Expression expr)
    {
        this.type = type;
        this.expr = expr;
    }
    
    enum Type
    {
        Plus, Negation, Not
    }
    
    private {
        Type type;
        Expression expr;
    }
}

class ArrayRef : Expression
{
    this(string name, Expression[] arguments)
    {
        this.name = name;
        this.arguments = arguments;
    }
    
    private 
    {
        string name;
        Expression[] arguments;
    }
}

class FuncCall : Expression
{
    this(string name, Expression[] arguments)
    {
        this.name = name;
        this.arguments = arguments;
    }
    
    private
    {
        string name;
        Expression[] arguments;
    }
}

class FuncRef : Expression
{
    this(string name) 
    {
        this.name = name;
    }
    
    private 
    {
        string name;
    }
}

class VarRef : Expression
{
    this(string name) 
    {
        this.name = name;
    }
    
    private 
    {
        string name;
    }
}

class VariableRef : Expression
{
    this(string name)
    {
        this.name = name;
    }
    
    private string name;
}

abstract class Literal : Expression
{
    
}

class IntegerLiteral : Literal
{
    this(int value)
    {
        this.value = value;
    }
    
    private int value;
}

class StringLiteral : Literal
{
    this(string value)
    {
        this.value = value;
    }
    
    private  string value;
}

class RealLiteral : Literal
{
    this(float value)
    {
        this.value = value;
    }
    
    private float value;
}

class BoolLiteral : Literal
{
    this(bool value)
    {
        this.value = value;
    }
    
    private bool value;
}

class NullLiteral : Literal
{
    this() {}
}

class Function : ISyntaxTree
{
    this(bool isConstant, FunctionDecl header
        , InputRange!LocalVar locals, InputRange!Statement statements)
    {
        this.isConstant = isConstant;
        this.header = header;
        this.locals = locals;
        this.statements = statements;
    }
    
    private {
        bool isConstant;
        FunctionDecl header;
        InputRange!LocalVar locals;
        InputRange!Statement statements;
    }
}

class LocalVar : ISyntaxTree
{
    this(bool isArray, string type, string name, Expression initializator)
    {
        this.isArray = isArray;
        this.type = type;
        this.name = name;
        this.initializator = initializator;
    }
    
    private {
        bool isArray;
        string type;
        string name;
        Expression initializator;
    }
}

abstract class Statement : ISyntaxTree
{
    public this(bool isDebug)
    {
        isDebug = isDebug;
    }
    
    private bool isDebug;
}

class SetStatement : Statement
{
    this(bool isArray, string name, Expression value, Expression arrayIndex, bool isDebug = false)
    {
        super(isDebug);
        this.isArray = isArray;
        this.name = name;
        this.value = value;
        this.arrayIndex = arrayIndex;
    }
    
    private
    {
        bool isArray;
        string name;
        Expression value;
        Expression arrayIndex;
    }
}

class CallStatement : Statement
{
    this(FuncCall call, bool isDebug = false)
    {
        super(isDebug);
        this.call = call;
    }
    
    private FuncCall call;
}

class IfThenElse : Statement
{
    this(Expression condition, InputRange!Statement thenClause, InputRange!ElseClause elseClauses, bool isDebug = false)
    {
        super(isDebug);
        this.condition = condition;
        this.thenClause = thenClause;
        this.elseClauses = elseClauses;
    }
    
    struct ElseClause
    {
        Expression condition;
        InputRange!Statement statements;
    }
    
    private
    {
        Expression condition;
        InputRange!Statement thenClause;
        InputRange!ElseClause elseClauses;
    }
}

class LoopStatement : Statement
{
    this(InputRange!Statement statements, bool isDebug = false)
    {
        super(isDebug);
        this.statements = statements;
    }
    
    private InputRange!Statement statements;
}

class ExitWhenStatement : Statement
{
    this(Expression condition)
    {
        super(false);
        this.condition = condition;
    }
    
    private Expression condition;
}

class ReturnStatement : Statement
{
    this(Expression value)
    {
        super(false);
        this.value = value;
    }
    
    private Expression value;
}